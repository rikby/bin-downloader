#!/usr/bin/env bash
# Fetch binary file from github repository
# See help:
#   $ curl -Ls https://raw.github.com/rikby/bin-downloader/master/download | bash -s -- --help

set -o errexit
set -o pipefail
set -o nounset
#set -o xtrace

show_help () {
  cat <<-EOF
GitHub binary scripts downloader
Version: 0.1.0

USING
  Download your binary file
    $ curl -Ls https://raw.github.com/rikby/bin-downloader/master/download | bash -s -- \\
          your-vendor/some-name \\
          dir/some-file.sh -- \\
          --filename|-f some-file \\
          --version|-v v0.2.1

    $ curl URL | bash -s -- REPO FILE \\
      [--end-message "message"|--help-app|--app-name "my name"] -- \\
      [--file FILE|-f FILE|--filename NAME|-n NAME|--versions|--version 0.1.2]

    $ curl URL | bash -s -- REPO FILE [SCRIPT OPTIONS] -- [USER OPTIONS]

SCRIPT SPECIFIC OPTIONS
  REPO          Repository full name "vendor/name" in github.com.
  FILE          Requested file in the passed repository.
  --end-message This will be showed in the end of downloading.
                %s will be replaced with full path to downloaded file.
                Default: "Binary file: %s\n"
  --app-help    Show help for application downloader
  --app-name    Use passed name in help.

END USER OPTIONS
  --versions    Show created tags.
  --version|-v  Created tag name or branch name.
                Default: last tag or master if there is no tags.
  --file|-f     Path to save downloaded file.
  --filename|-n Name to downloaded file by default path.
                (/usr/local/bin or /usr/bin)

YOUR DOWNLOAD SCRIPT

  Create your "download" script in your master branch in the repository root.
  Please replace "your-vendor/some-name" string with your path.

  #!/usr/bin/env bash
  # Fetch binary file
  #   $ curl -Ls https://raw.github.com/your-vendor/some-name/master/download | bash
  # See help:
  #   $ curl -Ls https://raw.github.com/your-vendor/some-name/master/download | bash -s -- --help

  set -o errexit
  set -o pipefail
  set -o nounset
  #set -o xtrace

  # Download
  $ curl -Ls https://raw.github.com/rikby/bin-downloader/master/download | bash -s -- \\
      your-vendor/some-name \\
      dir/some-file.sh -- \$@
EOF
}

show_app_help () {
  local app_name=${1:-GitHub binary scripts downloader https://raw.github.com/rikby/bin-downloader}
  cat <<-EOF
${app_name}

USING
  Download your binary file
    $ curl -Ls https://raw.github.com/${repo_name}/master/download | bash

  Or use some options
    $ curl -Ls https://raw.github.com/${repo_name}/master/download | bash -s -- \\
          --filename|-f some-file \\
          --version|-v v0.2.1

OPTIONS
  --versions    Show created tags.
  --version|-v  Created tag name or branch name.
                Default: last tag or master if there is no tags.
  --file|-f     Path to save downloaded file.
  --filename|-n Name of downloaded file by default path.
                (/usr/local/bin or /usr/bin)
EOF
}

parse_options () {
  [ -z "${1:-}" ] && return

  # Define repository name
  if [ '-' != "${1::1}" ]; then
    repo_name="$1";
    shift
  fi

  [ -z "${1:-}" ] && return

  # Define path to a file in repository
  if [ '-' != "${1::1}" ]; then
    repo_file="$1";
    shift
  fi

  [ -z "${1:-}" ] && return

  # validate and redefine options
  OPTS=$(getopt \
    -o hlv:f:r:p:n: \
    -l help,versions,version:,file:,repo-file:,repo:,filename:,app-name \
    -- "$@")
  eval set -- "${OPTS}"

  while true; do
    case "${1}" in
      # Message in the end. %s will be replaced with a created file.
      --end-message|-m)
        end_message="$2";
        shift 2;
        ;;
      --app-name)
        app_name="$2";
        shift 2;
        ;;
      # Show help
      --help|-h)
        show_help;
        exit 0
        shift;
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "${0}: unparseable option ${1}."
        exit 3
        ;;
    esac
  done

  [ -z "${1:-}" ] && return

  while true; do
    case "${1}" in
      # Pass a target version. Default: master
      --version|-v)
        version="$2";
        shift 2;
        ;;
      # Show versions
      --versions|-l)
        action='versions';
        shift;
        ;;
      # Use param to set full path to created binary file
      --file|-f)
        output_file="$2";
        shift 2;
        ;;
      # Use param to set filename in default path
      --filename|-n)
        output_filename="$2";
        shift 2;
        ;;
      # Show application help
      --help|-h)
        action='application_help'
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "${0}: unparseable option ${1}."
        exit 3
        ;;
    esac
  done
}

process_params () {
  if [ -z "${repo_name:-}" ]; then
    echo 'error: Repo name cannot be empty.'
    echo 'Please define: vendor/name'
    echo 'Use --help to get more info.'
    exit 3
  fi
  if [ -z "${repo_file:-}" ]; then
    echo 'error: Requested repository file cannot be empty.'
    echo 'Please define: dir/file'
    echo 'Use --help to get more info.'
    exit 3
  fi
  if [ -z "${output_file:-}" ] && [ -z "${output_filename:-}" ] ; then
    output_filename=$(basename ${repo_file})
  elif [ -n "${output_file:-}" ] && [ '/' != ${output_file::1} ]; then
    echo 'error: Path to output file must absolute. Please define: -f|--file file_name'
    exit 2
  fi

  # Use filename instead empty absolute file
  if [ -z "${output_file:-}" ]; then
    default_path='/usr/local/bin'
    if [ ! -d ${default_path} ]; then
      default_path='/usr/bin'
    fi
    output_file=${default_path}/${output_filename}
  fi

  if [ ! -d $(dirname ${output_file}) ]; then
    echo 'error: Directory "'$(dirname ${output_file})'" for output file does not exist.'
    exit 2
  fi

  base_url='https://raw.github.com/'${repo_name}
  base_api_url='https://api.github.com/repos/'${repo_name}
}

fetch_tags () {
  curl -Ls ${base_api_url}/tags | grep '"name"' | cut -d '"' -f 4
}

touch_file () {
  if [ ! -f "${output_file}" ]; then
    touch ${output_file}
    echo 1
  else
    echo 0
  fi
}

fetch_file () {
  curl -Ls ${base_url}/${version}/${repo_file} \
    --fail -w '%{http_code}' --output ${output_file}
}

process_response () {
  local http_code=$1
  if [ '200' != "${http_code}" ]; then
    echo "error: [${http_code}] No such version or bad connection."
    if [ ${had_file} == 0 ]; then
      rm -rf ${output_file}
    fi
    exit 8
  fi
}
set_exec_permissions () {
  if [[ ! "$(uname -a)" =~ 'Msys' ]]; then
    chmod +x ${output_file}
  fi
}

show_end_message () {
  printf "${end_message}" "${output_file}"
}

download_script () {
  local version end_message action \
    version output_file output_filename \
    repo_name repo_file app_name

  end_message='Binary file: %s'"\n"
  action='download'

  parse_options $@
  if [ 'application_help' == "${action}" ]; then
    show_app_help "${app_name}"
    exit 0
  fi
  process_params

  if [ 'versions' == "${action}" ]; then
    fetch_tags
    exit 0
  fi

  # fetch last tag or use master
  version=$(fetch_tags | head -1)
  version=${version:-master}

  echo "Fetching ${base_url}/${version}/${repo_file}..."
  had_file=$(touch_file)
  process_response $(fetch_file)
  set_exec_permissions
  show_end_message
}

download_script $@
